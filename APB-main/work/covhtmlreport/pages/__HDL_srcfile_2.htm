
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> fifomem
<a name="2"><q-n>     2  </q-n></a>#(
<a name="3"><q-n>     3  </q-n></a>  <q-w>parameter</q-w> DATASIZE = 8, <q-m>// Memory data word width</q-m>
<a name="4"><q-n>     4  </q-n></a>  <q-w>parameter</q-w> ADDRSIZE = 3  <q-m>// Number of mem address bits</q-m>
<a name="5"><q-n>     5  </q-n></a>)
<a name="6"><q-n>     6  </q-n></a>(
<a name="7"><q-n>     7  </q-n></a>  <q-w>input</q-w>   write_enable, write_full, write_clk,
<a name="8"><q-n>     8  </q-n></a>  <q-w>input</q-w>   [ADDRSIZE-1:0] waddr, raddr,
<a name="9"><q-n>     9  </q-n></a>  <q-w>input</q-w>   [DATASIZE-1:0] write_data,
<a name="10"><q-n>     10  </q-n></a>  <q-w>output</q-w>  [DATASIZE-1:0] read_data
<a name="11"><q-n>     11  </q-n></a>);
<a name="12"><q-n>     12  </q-n></a>  <q-m>// RTL Verilog memory model</q-m>
<a name="13"><q-n>     13  </q-n></a>  <q-w>localparam</q-w> DEPTH = 1&lt;&lt;ADDRSIZE;<q-m>//2*adDATASIZE</q-m>
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a>  <q-w>logic</q-w> [DATASIZE-1:0] mem [0:DEPTH-1];
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>  <q-w>assign</q-w> read_data = mem[raddr];
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> write_clk)
<a name="20"><q-n>     20  </q-n></a>    <q-w>if</q-w> (write_enable &amp;&amp; !write_full) 
<a name="21"><q-n>     21  </q-n></a>      	mem[waddr] &lt;= write_data; 
<a name="22"><q-n>     22  </q-n></a><q-w>endmodule</q-w>
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a><q-w>module</q-w> rptr_empty
<a name="26"><q-n>     26  </q-n></a>#(
<a name="27"><q-n>     27  </q-n></a>  <q-w>parameter</q-w> ADDRSIZE = 3
<a name="28"><q-n>     28  </q-n></a>)
<a name="29"><q-n>     29  </q-n></a>(
<a name="30"><q-n>     30  </q-n></a>  <q-w>input</q-w>   read_enable, read_clk, read_reset_n,
<a name="31"><q-n>     31  </q-n></a>  <q-w>input</q-w>   [ADDRSIZE :0] rq2_wptr,
<a name="32"><q-n>     32  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w>  read_empty,
<a name="33"><q-n>     33  </q-n></a>  <q-w>output</q-w>  [ADDRSIZE-1:0] raddr,
<a name="34"><q-n>     34  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w> [ADDRSIZE :0] rptr
<a name="35"><q-n>     35  </q-n></a>);
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>  <q-w>reg</q-w> [ADDRSIZE:0] rbin;
<a name="38"><q-n>     38  </q-n></a>  <q-w>wire</q-w> [ADDRSIZE:0] rgraynext, rbinnext;
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>  <q-m>//-------------------</q-m>
<a name="41"><q-n>     41  </q-n></a>  <q-m>// GRAYSTYLE2 pointer</q-m>
<a name="42"><q-n>     42  </q-n></a>  <q-m>//-------------------</q-m>
<a name="43"><q-n>     43  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> read_clk <q-t>or</q-w> <q-a>negedge</q-w> read_reset_n)
<a name="44"><q-n>     44  </q-n></a>    <q-w>if</q-w> (!read_reset_n)
<a name="45"><q-n>     45  </q-n></a>      {rbin, rptr} &lt;= '0;
<a name="46"><q-n>     46  </q-n></a>    <q-w>else</q-w>
<a name="47"><q-n>     47  </q-n></a>      {rbin, rptr} &lt;= {rbinnext, rgraynext};
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a>  <q-m>// Memory read-address pointer (okay to use binary to address memory)</q-m>
<a name="50"><q-n>     50  </q-n></a>  <q-w>assign</q-w> raddr = rbin[ADDRSIZE-1:0];
<a name="51"><q-n>     51  </q-n></a>  <q-w>assign</q-w> rbinnext = rbin + (read_enable &amp; ~read_empty);
<a name="52"><q-n>     52  </q-n></a>  <q-w>assign</q-w> rgraynext = (rbinnext&gt;&gt;1) ^ rbinnext;
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>  <q-m>//---------------------------------------------------------------</q-m>
<a name="55"><q-n>     55  </q-n></a>  <q-m>// FIFO empty when the next rptr == synchronized wptr or on reset</q-m>
<a name="56"><q-n>     56  </q-n></a>  <q-m>//---------------------------------------------------------------</q-m>
<a name="57"><q-n>     57  </q-n></a>  <q-w>assign</q-w> read_empty_val = (rgraynext == rq2_wptr);
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> read_clk <q-t>or</q-w> <q-a>negedge</q-w> read_reset_n)
<a name="60"><q-n>     60  </q-n></a>    <q-w>if</q-w> (!read_reset_n)
<a name="61"><q-n>     61  </q-n></a>      read_empty &lt;= 1'b1;
<a name="62"><q-n>     62  </q-n></a>    <q-w>else</q-w>
<a name="63"><q-n>     63  </q-n></a>      read_empty &lt;= read_empty_val;
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a><q-w>endmodule</q-w>
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a><q-w>module</q-w> sync_r2w
<a name="68"><q-n>     68  </q-n></a>#(
<a name="69"><q-n>     69  </q-n></a>  <q-w>parameter</q-w> ADDRSIZE = 3
<a name="70"><q-n>     70  </q-n></a>)
<a name="71"><q-n>     71  </q-n></a>(
<a name="72"><q-n>     72  </q-n></a>  <q-w>input</q-w>   write_clk, write_reset_n,
<a name="73"><q-n>     73  </q-n></a>  <q-w>input</q-w>   [ADDRSIZE:0] rptr,
<a name="74"><q-n>     74  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w>  [ADDRSIZE:0] wq2_rptr<q-m>//readpointer with write side</q-m>
<a name="75"><q-n>     75  </q-n></a>);
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a>  <q-w>reg</q-w> [ADDRSIZE:0] wq1_rptr;
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> write_clk <q-t>or</q-w> <q-a>negedge</q-w> write_reset_n)
<a name="80"><q-n>     80  </q-n></a>    <q-w>if</q-w> (!write_reset_n) {wq2_rptr,wq1_rptr} &lt;= 0;
<a name="81"><q-n>     81  </q-n></a>    <q-w>else</q-w> {wq2_rptr,wq1_rptr} &lt;= {wq1_rptr,rptr};
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a><q-w>endmodule</q-w>
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a><q-w>module</q-w> sync_w2r
<a name="86"><q-n>     86  </q-n></a>#(
<a name="87"><q-n>     87  </q-n></a>  <q-w>parameter</q-w> ADDRSIZE = 3
<a name="88"><q-n>     88  </q-n></a>)
<a name="89"><q-n>     89  </q-n></a>(
<a name="90"><q-n>     90  </q-n></a>  <q-w>input</q-w>   read_clk, read_reset_n,
<a name="91"><q-n>     91  </q-n></a>  <q-w>input</q-w>   [ADDRSIZE:0] wptr,
<a name="92"><q-n>     92  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w> [ADDRSIZE:0] rq2_wptr
<a name="93"><q-n>     93  </q-n></a>);
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a>  <q-w>reg</q-w> [ADDRSIZE:0] rq1_wptr;
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> read_clk <q-t>or</q-w> <q-a>negedge</q-w> read_reset_n)
<a name="98"><q-n>     98  </q-n></a>    <q-w>if</q-w> (!read_reset_n)
<a name="99"><q-n>     99  </q-n></a>      {rq2_wptr,rq1_wptr} &lt;= 0;
<a name="100"><q-n>     100  </q-n></a>    <q-w>else</q-w>
<a name="101"><q-n>     101  </q-n></a>      {rq2_wptr,rq1_wptr} &lt;= {rq1_wptr,wptr};
<a name="102"><q-n>     102  </q-n></a>
<a name="103"><q-n>     103  </q-n></a><q-w>endmodule</q-w>
<a name="104"><q-n>     104  </q-n></a>
<a name="105"><q-n>     105  </q-n></a><q-w>module</q-w> wptr_full
<a name="106"><q-n>     106  </q-n></a>#(
<a name="107"><q-n>     107  </q-n></a>  <q-w>parameter</q-w> ADDRSIZE = 3
<a name="108"><q-n>     108  </q-n></a>)
<a name="109"><q-n>     109  </q-n></a>(
<a name="110"><q-n>     110  </q-n></a>  <q-w>input</q-w>   write_enable, write_clk, write_reset_n,
<a name="111"><q-n>     111  </q-n></a>  <q-w>input</q-w>   [ADDRSIZE :0] wq2_rptr,
<a name="112"><q-n>     112  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w>  write_full,
<a name="113"><q-n>     113  </q-n></a>  <q-w>output</q-w>  [ADDRSIZE-1:0] waddr,
<a name="114"><q-n>     114  </q-n></a>  <q-w>output</q-w> <q-w>reg</q-w> [ADDRSIZE :0] wptr
<a name="115"><q-n>     115  </q-n></a>);
<a name="116"><q-n>     116  </q-n></a>
<a name="117"><q-n>     117  </q-n></a>   <q-w>reg</q-w> [ADDRSIZE:0] wbin;
<a name="118"><q-n>     118  </q-n></a>  <q-w>wire</q-w> [ADDRSIZE:0] wgraynext, wbinnext;
<a name="119"><q-n>     119  </q-n></a>
<a name="120"><q-n>     120  </q-n></a>  <q-m>// GRAYSTYLE2 pointer</q-m>
<a name="121"><q-n>     121  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> write_clk <q-t>or</q-w> <q-a>negedge</q-w> write_reset_n)
<a name="122"><q-n>     122  </q-n></a>    <q-w>if</q-w> (!write_reset_n)
<a name="123"><q-n>     123  </q-n></a>      {wbin, wptr} &lt;= '0;
<a name="124"><q-n>     124  </q-n></a>    <q-w>else</q-w>
<a name="125"><q-n>     125  </q-n></a>      {wbin, wptr} &lt;= {wbinnext, wgraynext};
<a name="126"><q-n>     126  </q-n></a>
<a name="127"><q-n>     127  </q-n></a>  <q-m>// Memory write-address pointer (okay to use binary to address memory)</q-m>
<a name="128"><q-n>     128  </q-n></a>  <q-w>assign</q-w> waddr = wbin[ADDRSIZE-1:0];
<a name="129"><q-n>     129  </q-n></a>  <q-w>assign</q-w> wbinnext = wbin + (write_enable &amp; ~write_full);
<a name="130"><q-n>     130  </q-n></a>  <q-w>assign</q-w> wgraynext = (wbinnext&gt;&gt;1) ^ wbinnext;
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a>  <q-m>//------------------------------------------------------------------</q-m>
<a name="133"><q-n>     133  </q-n></a>  <q-m>// Simplified version of the three necessary full-tests:</q-m>
<a name="134"><q-n>     134  </q-n></a>  <q-m>// assign write_full_val=((wgnext[ADDRSIZE] !=wq2_rptr[ADDRSIZE] ) &amp;&amp;</q-m>
<a name="135"><q-n>     135  </q-n></a>  <q-m>// (wgnext[ADDRSIZE-1] !=wq2_rptr[ADDRSIZE-1]) &amp;&amp;</q-m>
<a name="136"><q-n>     136  </q-n></a>  <q-m>// (wgnext[ADDRSIZE-2:0]==wq2_rptr[ADDRSIZE-2:0]));</q-m>
<a name="137"><q-n>     137  </q-n></a>  <q-m>//------------------------------------------------------------------</q-m>
<a name="138"><q-n>     138  </q-n></a>  <q-w>assign</q-w> write_full_val = (wgraynext=={~wq2_rptr[ADDRSIZE:ADDRSIZE-1], wq2_rptr[ADDRSIZE-2:0]});
<a name="139"><q-n>     139  </q-n></a>
<a name="140"><q-n>     140  </q-n></a>  <q-w>always_ff</q-w> @(<q-a>posedge</q-w> write_clk <q-t>or</q-w> <q-a>negedge</q-w> write_reset_n)
<a name="141"><q-n>     141  </q-n></a>    <q-w>if</q-w> (!write_reset_n)
<a name="142"><q-n>     142  </q-n></a>      write_full &lt;= 1'b0;
<a name="143"><q-n>     143  </q-n></a>    <q-w>else</q-w>
<a name="144"><q-n>     144  </q-n></a>      write_full &lt;= write_full_val;
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a><q-w>endmodule</q-w>
<a name="147"><q-n>     147  </q-n></a>
<a name="148"><q-n>     148  </q-n></a><q-w>module</q-w> async_fifo
<a name="149"><q-n>     149  </q-n></a>#(
<a name="150"><q-n>     150  </q-n></a>  <q-w>parameter</q-w> DATASIZE = 8,
<a name="151"><q-n>     151  </q-n></a>  <q-w>parameter</q-w> ADDRESSSIZE = 3
<a name="152"><q-n>     152  </q-n></a> )
<a name="153"><q-n>     153  </q-n></a>(
<a name="154"><q-n>     154  </q-n></a>  <q-w>input</q-w>   write_enable, write_clk, write_reset_n,<q-m>//write_enable write enable signal</q-m>
<a name="155"><q-n>     155  </q-n></a>  <q-w>input</q-w>   read_enable, read_clk, read_reset_n,<q-m>//read_enable read enable signal</q-m>
<a name="156"><q-n>     156  </q-n></a>  <q-w>input</q-w>   [DATASIZE-1:0] write_data,
<a name="157"><q-n>     157  </q-n></a>
<a name="158"><q-n>     158  </q-n></a>  <q-w>output</q-w>  [DATASIZE-1:0] read_data,
<a name="159"><q-n>     159  </q-n></a>  <q-w>output</q-w>  write_full,
<a name="160"><q-n>     160  </q-n></a>  <q-w>output</q-w>  read_empty
<a name="161"><q-n>     161  </q-n></a>);
<a name="162"><q-n>     162  </q-n></a>
<a name="163"><q-n>     163  </q-n></a>  <q-w>wire</q-w> [ADDRESSSIZE-1:0] waddr, raddr;
<a name="164"><q-n>     164  </q-n></a>  <q-w>wire</q-w> [ADDRESSSIZE:0] wptr, rptr, wq2_rptr, rq2_wptr;
<a name="165"><q-n>     165  </q-n></a>
<a name="166"><q-n>     166  </q-n></a>  sync_r2w sync_r2w (.*);
<a name="167"><q-n>     167  </q-n></a>  sync_w2r sync_w2r (.*);
<a name="168"><q-n>     168  </q-n></a>  fifomem #(DATASIZE, ADDRESSSIZE) fifomem (.*);
<a name="169"><q-n>     169  </q-n></a>  rptr_empty #(ADDRESSSIZE) rptr_empty (.*);
<a name="170"><q-n>     170  </q-n></a>  wptr_full #(ADDRESSSIZE) wptr_full (.*);
<a name="171"><q-n>     171  </q-n></a>
<a name="172"><q-n>     172  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
