
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`ifndef DRIVER
<a name="2"><q-n>     2  </q-n></a>`<q-a>define</q-w> DRIVER
<a name="3"><q-n>     3  </q-n></a>`<q-i>include</q-w> <q-l>"stimulus.sv"</q-l>
<a name="4"><q-n>     4  </q-n></a>`<q-i>include</q-w> <q-l>"scoreboard.sv"</q-l>
<a name="5"><q-n>     5  </q-n></a>
<a name="6"><q-n>     6  </q-n></a><q-w>class</q-w> driver;
<a name="7"><q-n>     7  </q-n></a>    stimulus    sti;
<a name="8"><q-n>     8  </q-n></a>    scoreboard  sb; 
<a name="9"><q-n>     9  </q-n></a>    
<a name="10"><q-n>     10  </q-n></a>    <q-w>virtual</q-w> intf_i2c intf;
<a name="11"><q-n>     11  </q-n></a>    
<a name="12"><q-n>     12  </q-n></a>
<a name="13"><q-n>     13  </q-n></a>    <q-w>covergroup</q-w> cov @(<q-a>posedge</q-w> intf.pclk);
<a name="14"><q-n>     14  </q-n></a>        reg_addr: <q-w>coverpoint</q-w> intf.paddr {
<a name="15"><q-n>     15  </q-n></a>            <q-w>bins</q-w> write  = {1, 2, 4, 6};
<a name="16"><q-n>     16  </q-n></a>            <q-w>bins</q-w> read   = {3, 5};
<a name="17"><q-n>     17  </q-n></a>        }
<a name="18"><q-n>     18  </q-n></a>        rw: <q-w>coverpoint</q-w> intf.pwrite;
<a name="19"><q-n>     19  </q-n></a>        rw_reg: <q-w>cross</q-w> reg_addr, rw;
<a name="20"><q-n>     20  </q-n></a>    <q-w>endgroup</q-w>
<a name="21"><q-n>     21  </q-n></a>
<a name="22"><q-n>     22  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>virtual</q-w> intf_i2c intf, scoreboard sb);
<a name="23"><q-n>     23  </q-n></a>        <q-w>this</q-w>.intf   = intf;
<a name="24"><q-n>     24  </q-n></a>        <q-w>this</q-w>.sb     = sb;
<a name="25"><q-n>     25  </q-n></a>        cov         = <q-w>new</q-w>();
<a name="26"><q-n>     26  </q-n></a>    <q-w>endfunction</q-w>
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>    <q-w>task</q-w> assign_intf(stimulus sti);
<a name="29"><q-n>     29  </q-n></a>        intf.penable    = sti.PENABLE;
<a name="30"><q-n>     30  </q-n></a>        intf.paddr      = sti.PADDR;
<a name="31"><q-n>     31  </q-n></a>        intf.pselx      = sti.PSELx;
<a name="32"><q-n>     32  </q-n></a>        intf.pwdata     = sti.PWDATA;
<a name="33"><q-n>     33  </q-n></a>        intf.pwrite     = sti.PWRITE;
<a name="34"><q-n>     34  </q-n></a>    <q-w>endtask</q-w>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>    <q-m>// Reset task</q-m>
<a name="37"><q-n>     37  </q-n></a>    <q-w>task</q-w> RESET();
<a name="38"><q-n>     38  </q-n></a>        intf.pwdata     = 0;
<a name="39"><q-n>     39  </q-n></a>        intf.prdata     = 0;
<a name="40"><q-n>     40  </q-n></a>        intf.paddr      = 0;
<a name="41"><q-n>     41  </q-n></a>        intf.penable    = 0;
<a name="42"><q-n>     42  </q-n></a>        intf.pselx      = 0;
<a name="43"><q-n>     43  </q-n></a>        intf.pwrite     = 0;
<a name="44"><q-n>     44  </q-n></a>        intf.pready     = 0;
<a name="45"><q-n>     45  </q-n></a>        intf.preset_n   = 0;
<a name="46"><q-n>     46  </q-n></a>        <q-w>repeat</q-w>(5)
<a name="47"><q-n>     47  </q-n></a>            @(<q-a>posedge</q-w> intf.pclk); 
<a name="48"><q-n>     48  </q-n></a>        intf.preset_n = 1;
<a name="49"><q-n>     49  </q-n></a>    <q-w>endtask</q-w>
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>    <q-m>// Write to address register </q-m>
<a name="52"><q-n>     52  </q-n></a>    <q-w>task</q-w> WRITE_REGISTER(<q-w>input</q-w> <q-w>bit</q-w> [7:0] paddr, <q-w>bit</q-w> [7:0] pwdata, <q-w>bit</q-w> rw);
<a name="53"><q-n>     53  </q-n></a>        sti = <q-w>new</q-w>();
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk);
<a name="56"><q-n>     56  </q-n></a>        sti.clock_1();
<a name="57"><q-n>     57  </q-n></a>        sti.PADDR = paddr;
<a name="58"><q-n>     58  </q-n></a>        sti.PWDATA = pwdata;
<a name="59"><q-n>     59  </q-n></a>        sti.PWRITE = rw;
<a name="60"><q-n>     60  </q-n></a>        assign_intf(sti);
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk);
<a name="63"><q-n>     63  </q-n></a>        sti.clock_2();
<a name="64"><q-n>     64  </q-n></a>        intf.penable = sti.PENABLE;
<a name="65"><q-n>     65  </q-n></a>        <q-w>if</q-w> (intf.paddr == 4) <q-w>begin</q-w>
<a name="66"><q-n>     66  </q-n></a>            sb.data_transmitted.push_back(intf.pwdata);
<a name="67"><q-n>     67  </q-n></a>            sb.display();
<a name="68"><q-n>     68  </q-n></a>        <q-w>end</q-w>
<a name="69"><q-n>     69  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk)
<a name="70"><q-n>     70  </q-n></a>        intf.penable = 0;
<a name="71"><q-n>     71  </q-n></a>    <q-w>endtask</q-w>
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>    
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>    <q-m>// Read receive task</q-m>
<a name="76"><q-n>     76  </q-n></a>    <q-w>task</q-w> READ_REGISTER(<q-w>input</q-w> <q-w>bit</q-w> [7:0] paddr, <q-w>bit</q-w> rw);
<a name="77"><q-n>     77  </q-n></a>        sti = <q-w>new</q-w>();
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk);
<a name="80"><q-n>     80  </q-n></a>        sti.clock_1();
<a name="81"><q-n>     81  </q-n></a>        sti.PADDR = paddr;
<a name="82"><q-n>     82  </q-n></a>        sti.PWRITE = rw;
<a name="83"><q-n>     83  </q-n></a>        assign_intf(sti);
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk);
<a name="86"><q-n>     86  </q-n></a>        sti.clock_2();
<a name="87"><q-n>     87  </q-n></a>        intf.penable = sti.PENABLE;
<a name="88"><q-n>     88  </q-n></a>        @(<q-a>posedge</q-w> intf.pclk)
<a name="89"><q-n>     89  </q-n></a>        intf.penable = 0;
<a name="90"><q-n>     90  </q-n></a>        <q-w>if</q-w> (paddr == 3)
<a name="91"><q-n>     91  </q-n></a>            $display(<q-l>"APB read data = %b from status register"</q-l>, intf.prdata);
<a name="92"><q-n>     92  </q-n></a>        <q-w>else</q-w> <q-w>if</q-w> (paddr == 5)
<a name="93"><q-n>     93  </q-n></a>            $display(<q-l>"APB read data = %b from receive register"</q-l>, intf.prdata);
<a name="94"><q-n>     94  </q-n></a>    <q-w>endtask</q-w>
<a name="95"><q-n>     95  </q-n></a><q-w>endclass</q-w>
<a name="96"><q-n>     96  </q-n></a>`<q-a>endif</q-w> </pre>
</tt>

  
</body>
</html>
