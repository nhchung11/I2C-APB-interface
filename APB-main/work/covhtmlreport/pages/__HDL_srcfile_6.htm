
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"stimulus.sv"</q-l>
<a name="2"><q-n>     2  </q-n></a>`<q-i>include</q-w> <q-l>"interface.sv"</q-l>
<a name="3"><q-n>     3  </q-n></a>`<q-i>include</q-w> <q-l>"driver.sv"</q-l>
<a name="4"><q-n>     4  </q-n></a>`<q-i>include</q-w> <q-l>"env.sv"</q-l>
<a name="5"><q-n>     5  </q-n></a>`<q-i>include</q-w> <q-l>"assertion.sv"</q-l>
<a name="6"><q-n>     6  </q-n></a><q-m>// `include "TEST9.sv"</q-m>
<a name="7"><q-n>     7  </q-n></a>`<q-a>timescale</q-w> 1<q-v>ns</q-w>/1<q-v>ns</q-w>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>`<q-a>ifdef</q-w>  TEST0_1
<a name="10"><q-n>     10  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST0_1.sv"</q-l>
<a name="11"><q-n>     11  </q-n></a>`elsif  TEST0_2
<a name="12"><q-n>     12  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST0_2.sv"</q-l>
<a name="13"><q-n>     13  </q-n></a>`elsif  TEST1
<a name="14"><q-n>     14  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST1.sv"</q-l>
<a name="15"><q-n>     15  </q-n></a>`elsif  TEST2
<a name="16"><q-n>     16  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST2.sv"</q-l>
<a name="17"><q-n>     17  </q-n></a>`elsif  TEST3
<a name="18"><q-n>     18  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST3.sv"</q-l>
<a name="19"><q-n>     19  </q-n></a>`elsif  TEST4
<a name="20"><q-n>     20  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST4.sv"</q-l>
<a name="21"><q-n>     21  </q-n></a>`elsif  TEST5
<a name="22"><q-n>     22  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST5.sv"</q-l>
<a name="23"><q-n>     23  </q-n></a>`elsif  TEST6
<a name="24"><q-n>     24  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST6.sv"</q-l>
<a name="25"><q-n>     25  </q-n></a>`elsif  TEST7
<a name="26"><q-n>     26  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST7.sv"</q-l>
<a name="27"><q-n>     27  </q-n></a>`elsif  TEST8
<a name="28"><q-n>     28  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST8.sv"</q-l>
<a name="29"><q-n>     29  </q-n></a>`elsif  TEST9
<a name="30"><q-n>     30  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST9.sv"</q-l>
<a name="31"><q-n>     31  </q-n></a>`elsif  TEST10
<a name="32"><q-n>     32  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST10.sv"</q-l>
<a name="33"><q-n>     33  </q-n></a>`elsif  TEST11
<a name="34"><q-n>     34  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST11.sv"</q-l>
<a name="35"><q-n>     35  </q-n></a>`elsif  TEST12
<a name="36"><q-n>     36  </q-n></a>    `<q-i>include</q-w> <q-l>"TEST12.sv"</q-l>
<a name="37"><q-n>     37  </q-n></a>`<q-a>endif</q-w> 
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a><q-w>module</q-w> top();
<a name="40"><q-n>     40  </q-n></a>    <q-w>reg</q-w> PCLK = 1;
<a name="41"><q-n>     41  </q-n></a>    <q-w>reg</q-w> clk = 1;
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>    <q-w>always</q-w> #20 clk= ~clk;
<a name="44"><q-n>     44  </q-n></a>	<q-w>always</q-w> #5 PCLK= ~PCLK;
<a name="45"><q-n>     45  </q-n></a>    
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>    <q-m>// DUT/assertion monitor/testcase instances</q-m>
<a name="48"><q-n>     48  </q-n></a>    intf_i2c        intf(PCLK, clk);
<a name="49"><q-n>     49  </q-n></a>
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>    apb_to_i2c_top  DUT
<a name="52"><q-n>     52  </q-n></a>    (
<a name="53"><q-n>     53  </q-n></a>        .PCLK       (intf.pclk),
<a name="54"><q-n>     54  </q-n></a>        .PRESETn    (intf.preset_n),
<a name="55"><q-n>     55  </q-n></a>        .PSELx      (intf.pselx),
<a name="56"><q-n>     56  </q-n></a>        .PWRITE     (intf.pwrite),
<a name="57"><q-n>     57  </q-n></a>        .PENABLE    (intf.penable),
<a name="58"><q-n>     58  </q-n></a>        .PADDR      (intf.paddr),
<a name="59"><q-n>     59  </q-n></a>        .PWDATA     (intf.pwdata),
<a name="60"><q-n>     60  </q-n></a>        .clk        (intf.clk),
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>        .PREADY     (intf.pready),
<a name="63"><q-n>     63  </q-n></a>        .PRDATA     (intf.prdata),
<a name="64"><q-n>     64  </q-n></a>        .i2c_sda    (intf.sda),
<a name="65"><q-n>     65  </q-n></a>        .i2c_scl    (intf.scl)
<a name="66"><q-n>     66  </q-n></a>    );
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>    i2c_slave_model MODEL
<a name="69"><q-n>     69  </q-n></a>    (   
<a name="70"><q-n>     70  </q-n></a>        .sda        (intf.sda),
<a name="71"><q-n>     71  </q-n></a>        .scl        (intf.scl),
<a name="72"><q-n>     72  </q-n></a>        .saved_data (intf.data_write),
<a name="73"><q-n>     73  </q-n></a>        .check_data (intf.check_data),
<a name="74"><q-n>     74  </q-n></a>        .read_data  (intf.read_data)
<a name="75"><q-n>     75  </q-n></a>    );
<a name="76"><q-n>     76  </q-n></a>    testcase        test(intf);
<a name="77"><q-n>     77  </q-n></a>    assertion_cov   acov(intf);
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>    <q-m>// assign intf.pready = DUT.PREADY;</q-m>
<a name="80"><q-n>     80  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
