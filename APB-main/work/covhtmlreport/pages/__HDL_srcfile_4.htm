
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> apb_to_i2c_top 
<a name="2"><q-n>     2  </q-n></a>	#(<q-w>parameter</q-w> ADDRESSWIDTH= 4,
<a name="3"><q-n>     3  </q-n></a>	<q-w>parameter</q-w> DATAWIDTH= 8)
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a>	(
<a name="6"><q-n>     6  </q-n></a>	<q-m>//apb block</q-m>
<a name="7"><q-n>     7  </q-n></a>	<q-w>input</q-w> PCLK,
<a name="8"><q-n>     8  </q-n></a>	<q-w>input</q-w> PRESETn,
<a name="9"><q-n>     9  </q-n></a>	<q-w>input</q-w> [DATAWIDTH-1:0] PADDR,
<a name="10"><q-n>     10  </q-n></a>	<q-w>input</q-w> [DATAWIDTH-1:0] PWDATA,
<a name="11"><q-n>     11  </q-n></a>	<q-w>input</q-w> PWRITE,
<a name="12"><q-n>     12  </q-n></a>	<q-w>input</q-w> PSELx,
<a name="13"><q-n>     13  </q-n></a>	<q-w>input</q-w> PENABLE,
<a name="14"><q-n>     14  </q-n></a>	<q-w>output</q-w>  [DATAWIDTH-1:0] PRDATA,
<a name="15"><q-n>     15  </q-n></a>	<q-w>output</q-w>  PREADY,
<a name="16"><q-n>     16  </q-n></a>	
<a name="17"><q-n>     17  </q-n></a>	<q-m>//i2c block</q-m>
<a name="18"><q-n>     18  </q-n></a>	<q-w>inout</q-w> i2c_sda,
<a name="19"><q-n>     19  </q-n></a>	<q-w>inout</q-w> i2c_scl,
<a name="20"><q-n>     20  </q-n></a>	<q-w>input</q-w> clk
<a name="21"><q-n>     21  </q-n></a>	
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>	);
<a name="24"><q-n>     24  </q-n></a>	
<a name="25"><q-n>     25  </q-n></a>	<q-m>//apb signal</q-m>
<a name="26"><q-n>     26  </q-n></a>	<q-w>wire</q-w> write_enable_tx;
<a name="27"><q-n>     27  </q-n></a>	<q-w>wire</q-w> read_enable_rx;
<a name="28"><q-n>     28  </q-n></a>	<q-w>wire</q-w> delete_reg_command;
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>	<q-m>//register apb</q-m>
<a name="31"><q-n>     31  </q-n></a>	<q-w>wire</q-w> [7:0] reg_command;
<a name="32"><q-n>     32  </q-n></a>	<q-w>wire</q-w> [7:0] reg_status;
<a name="33"><q-n>     33  </q-n></a>	<q-w>wire</q-w> [7:0] reg_transmit;
<a name="34"><q-n>     34  </q-n></a>	<q-w>wire</q-w> [7:0] reg_receive;	
<a name="35"><q-n>     35  </q-n></a>	<q-w>wire</q-w> [7:0] reg_address;
<a name="36"><q-n>     36  </q-n></a>	
<a name="37"><q-n>     37  </q-n></a>	<q-m>//change 1 bit to 8 bit data out</q-m>
<a name="38"><q-n>     38  </q-n></a>	<q-w>wire</q-w> [7:0] combine_bit_data;
<a name="39"><q-n>     39  </q-n></a>	
<a name="40"><q-n>     40  </q-n></a>	<q-m>//</q-m>
<a name="41"><q-n>     41  </q-n></a>	<q-w>wire</q-w> [7:0] data_fifo_to_i2c;
<a name="42"><q-n>     42  </q-n></a>	<q-w>wire</q-w> [7:0] data_i2c_to_fifo;
<a name="43"><q-n>     43  </q-n></a>	<q-w>reg</q-w> [7:0] data_fifo_to_i2c_tx;
<a name="44"><q-n>     44  </q-n></a>	
<a name="45"><q-n>     45  </q-n></a>	<q-m>//i2c signal</q-m>
<a name="46"><q-n>     46  </q-n></a>	<q-w>wire</q-w> i2c_ready;
<a name="47"><q-n>     47  </q-n></a>	<q-w>wire</q-w> [7:0] i2c_data_in;
<a name="48"><q-n>     48  </q-n></a>	<q-w>wire</q-w> fifo_tx_rd_en;
<a name="49"><q-n>     49  </q-n></a>	<q-w>wire</q-w> fifo_rx_wr_en;
<a name="50"><q-n>     50  </q-n></a>	<q-w>wire</q-w> i2c_enable;
<a name="51"><q-n>     51  </q-n></a>	<q-w>wire</q-w> fifo_tx_empty;
<a name="52"><q-n>     52  </q-n></a>	
<a name="53"><q-n>     53  </q-n></a>	<q-m>//signal</q-m>
<a name="54"><q-n>     54  </q-n></a>	<q-w>reg</q-w> [7:0] pre_i2c_data_in;
<a name="55"><q-n>     55  </q-n></a>	<q-w>reg</q-w> delete_i2c_enable;
<a name="56"><q-n>     56  </q-n></a>	<q-w>reg</q-w> pre_i2c_enable;
<a name="57"><q-n>     57  </q-n></a>	<q-w>reg</q-w> [2:0] status1 = 0;
<a name="58"><q-n>     58  </q-n></a>	<q-w>reg</q-w> c = 0;
<a name="59"><q-n>     59  </q-n></a>	<q-w>reg</q-w> pre_data_i2c_to_fifo;
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a>	<q-m>// bit no use</q-m>
<a name="62"><q-n>     62  </q-n></a>	<q-w>assign</q-w> reg_command[1:0] = 2'b00;
<a name="63"><q-n>     63  </q-n></a>	<q-w>assign</q-w> reg_status[2:0] = 3'b000;
<a name="64"><q-n>     64  </q-n></a>	
<a name="65"><q-n>     65  </q-n></a>	<q-m>//connect module</q-m>
<a name="66"><q-n>     66  </q-n></a>	apb_slave apb_slave(
<a name="67"><q-n>     67  </q-n></a>		.PCLK(PCLK),
<a name="68"><q-n>     68  </q-n></a>		.PRESETn(PRESETn),
<a name="69"><q-n>     69  </q-n></a>		.PADDR(PADDR),
<a name="70"><q-n>     70  </q-n></a>		.PWDATA(PWDATA),
<a name="71"><q-n>     71  </q-n></a>		.PWRITE(PWRITE),
<a name="72"><q-n>     72  </q-n></a>		.PSELx(PSELx),
<a name="73"><q-n>     73  </q-n></a>		.PENABLE(PENABLE),
<a name="74"><q-n>     74  </q-n></a>		.PRDATA(PRDATA),
<a name="75"><q-n>     75  </q-n></a>		.PREADY(PREADY),
<a name="76"><q-n>     76  </q-n></a>	
<a name="77"><q-n>     77  </q-n></a>		<q-m>//register	</q-m>
<a name="78"><q-n>     78  </q-n></a>		.reg_command(reg_command),
<a name="79"><q-n>     79  </q-n></a>		.reg_status(reg_status),
<a name="80"><q-n>     80  </q-n></a>		.reg_transmit(reg_transmit),
<a name="81"><q-n>     81  </q-n></a>		.reg_receive(reg_receive),
<a name="82"><q-n>     82  </q-n></a>		.reg_address(reg_address),
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a>		.write_enable_tx(write_enable_tx),
<a name="85"><q-n>     85  </q-n></a>		.read_enable_rx(read_enable_rx),
<a name="86"><q-n>     86  </q-n></a>		.delete_reg_command(delete_reg_command)
<a name="87"><q-n>     87  </q-n></a>	);
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>	async_fifo tx_fifo(
<a name="90"><q-n>     90  </q-n></a>		.write_enable(write_enable_tx), 
<a name="91"><q-n>     91  </q-n></a>		.write_clk(PCLK), 
<a name="92"><q-n>     92  </q-n></a>		.write_reset_n(reg_command[7]),
<a name="93"><q-n>     93  </q-n></a>		.read_enable(fifo_tx_rd_en), 
<a name="94"><q-n>     94  </q-n></a>		.read_clk(clk), 
<a name="95"><q-n>     95  </q-n></a>		.read_reset_n(reg_command[6]),
<a name="96"><q-n>     96  </q-n></a>		.write_data(reg_transmit),
<a name="97"><q-n>     97  </q-n></a>		.read_data(data_fifo_to_i2c),
<a name="98"><q-n>     98  </q-n></a>		.write_full(reg_status[7]),
<a name="99"><q-n>     99  </q-n></a>		.read_empty(reg_status[6])
<a name="100"><q-n>     100  </q-n></a>	);
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>	async_fifo rx_fifo(
<a name="103"><q-n>     103  </q-n></a>		.write_enable(fifo_rx_wr_en), 
<a name="104"><q-n>     104  </q-n></a>		.write_clk(clk), 
<a name="105"><q-n>     105  </q-n></a>		.write_reset_n(reg_command[5]),
<a name="106"><q-n>     106  </q-n></a>		.read_enable(read_enable_rx), 
<a name="107"><q-n>     107  </q-n></a>		.read_clk(PCLK), 
<a name="108"><q-n>     108  </q-n></a>		.read_reset_n(reg_command[4]),
<a name="109"><q-n>     109  </q-n></a>		.write_data(data_i2c_to_fifo),
<a name="110"><q-n>     110  </q-n></a>		.read_data(reg_receive),
<a name="111"><q-n>     111  </q-n></a>		.write_full(reg_status[5]),
<a name="112"><q-n>     112  </q-n></a>		.read_empty(reg_status[4])
<a name="113"><q-n>     113  </q-n></a>	);
<a name="114"><q-n>     114  </q-n></a>
<a name="115"><q-n>     115  </q-n></a>	i2c_master i2c_master(
<a name="116"><q-n>     116  </q-n></a>		.clk(clk),
<a name="117"><q-n>     117  </q-n></a>		.i2c_reset_n(reg_command[3]),
<a name="118"><q-n>     118  </q-n></a>		.addr(reg_address[7:1]),
<a name="119"><q-n>     119  </q-n></a>		.rw(reg_address[0]),
<a name="120"><q-n>     120  </q-n></a>		.i2c_enable(i2c_enable),
<a name="121"><q-n>     121  </q-n></a>		.i2c_data_in(i2c_data_in),
<a name="122"><q-n>     122  </q-n></a>		.i2c_data_out(data_i2c_to_fifo),
<a name="123"><q-n>     123  </q-n></a>		.i2c_sda(i2c_sda),
<a name="124"><q-n>     124  </q-n></a>		.i2c_scl(i2c_scl),
<a name="125"><q-n>     125  </q-n></a>		.i2c_ready(reg_status[3]),
<a name="126"><q-n>     126  </q-n></a>		.fifo_tx_rd_en(fifo_tx_rd_en),
<a name="127"><q-n>     127  </q-n></a>		.fifo_rx_wr_en(fifo_rx_wr_en),
<a name="128"><q-n>     128  </q-n></a>		.i2c_repeat_start(reg_command[2]),
<a name="129"><q-n>     129  </q-n></a>		.fifo_tx_empty(reg_status[6]),
<a name="130"><q-n>     130  </q-n></a>		.fifo_rx_full(reg_status[5])
<a name="131"><q-n>     131  </q-n></a>	);
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>	<q-m>// i2c_slave_model i2c_slave(</q-m>
<a name="134"><q-n>     134  </q-n></a>	<q-m>// 	.sda(i2c_sda),</q-m>
<a name="135"><q-n>     135  </q-n></a>	<q-m>// 	.scl(i2c_scl)</q-m>
<a name="136"><q-n>     136  </q-n></a>	<q-m>// );</q-m>
<a name="137"><q-n>     137  </q-n></a>	
<a name="138"><q-n>     138  </q-n></a>	<q-m>// fifo_tx_rd_en -&gt; read accept</q-m>
<a name="139"><q-n>     139  </q-n></a>	<q-w>assign</q-w> i2c_data_in = pre_i2c_data_in;
<a name="140"><q-n>     140  </q-n></a>	<q-w>always</q-w>@ (<q-a>posedge</q-w> clk) <q-w>begin</q-w>
<a name="141"><q-n>     141  </q-n></a>		<q-w>if</q-w> (fifo_tx_rd_en)
<a name="142"><q-n>     142  </q-n></a>			pre_i2c_data_in &lt;= data_fifo_to_i2c;
<a name="143"><q-n>     143  </q-n></a>	<q-w>end</q-w>
<a name="144"><q-n>     144  </q-n></a>
<a name="145"><q-n>     145  </q-n></a>	<q-w>assign</q-w> delete_reg_command = fifo_tx_rd_en; 
<a name="146"><q-n>     146  </q-n></a>	<q-w>assign</q-w> i2c_enable = pre_i2c_enable;
<a name="147"><q-n>     147  </q-n></a>	<q-w>always</q-w>@ (<q-a>posedge</q-w> clk) <q-w>begin</q-w>
<a name="148"><q-n>     148  </q-n></a>		<q-w>if</q-w>(reg_command[2] == 1) <q-w>begin</q-w>
<a name="149"><q-n>     149  </q-n></a>			<q-w>if</q-w> (reg_status[3]) <q-w>begin</q-w>
<a name="150"><q-n>     150  </q-n></a>				pre_i2c_enable &lt;= reg_command[2];
<a name="151"><q-n>     151  </q-n></a>				<q-w>end</q-w>
<a name="152"><q-n>     152  </q-n></a>			<q-w>else</q-w> <q-w>begin</q-w>
<a name="153"><q-n>     153  </q-n></a>				pre_i2c_enable &lt;= 0;
<a name="154"><q-n>     154  </q-n></a>			<q-w>end</q-w>
<a name="155"><q-n>     155  </q-n></a>		<q-w>end</q-w>
<a name="156"><q-n>     156  </q-n></a>	<q-w>end</q-w>
<a name="157"><q-n>     157  </q-n></a>	
<a name="158"><q-n>     158  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
